{"version":3,"sources":["webpack:///./node_modules/@styled-icons/fa-regular/CaretSquareDown/CaretSquareDown.esm.js","webpack:///./node_modules/@styled-icons/fa-regular/CaretSquareUp/CaretSquareUp.esm.js","webpack:///./src/components/toc.js","webpack:///./src/templates/post.js"],"names":["CaretSquareDown","props","ref","iconAttrs","iconVerticalAlign","iconViewBox","fill","d","displayName","CaretSquareUp","ShowToC","withColor","c","black","primary","styled","button","theme","colors","ToCHTML","div","ToCContainer","white","secondary","rhythm","TableOfContents","state","show","toggle","setState","render","this","caret","size","onClick","dangerouslySetInnerHTML","__html","tableOfContents","Component","localizedStrings","en","originally_written","last_updated_on","es","Header","header","Meta","footer","PostMeta","language","createdAt","createdAtString","lastModifiedAt","dateTime","PostHeader","title","query","PostTemplate","data","post","fields","author","frontmatter","TOC","description","shareTitle","shareDescription","createdAtString_es","createdAtString_en","html","og","type","published_time","modified_time"],"mappings":"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","file":"component---src-templates-post-js-a0cec5b6f37f9e5c889f.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { StyledIconBase } from '@styled-icons/styled-icon';\nexport var CaretSquareDown = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(StyledIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 448 512\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M125.1 208h197.8c10.7 0 16.1 13 8.5 20.5l-98.9 98.3c-4.7 4.7-12.2 4.7-16.9 0l-98.9-98.3c-7.7-7.5-2.3-20.5 8.4-20.5zM448 80v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"\n  }));\n});\nCaretSquareDown.displayName = 'CaretSquareDown';\nexport var CaretSquareDownDimensions = {\n  height: 512,\n  width: 448\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { StyledIconBase } from '@styled-icons/styled-icon';\nexport var CaretSquareUp = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(StyledIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 448 512\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M322.9 304H125.1c-10.7 0-16.1-13-8.5-20.5l98.9-98.3c4.7-4.7 12.2-4.7 16.9 0l98.9 98.3c7.7 7.5 2.3 20.5-8.4 20.5zM448 80v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z\"\n  }));\n});\nCaretSquareUp.displayName = 'CaretSquareUp';\nexport var CaretSquareUpDimensions = {\n  height: 512,\n  width: 448\n};","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport { CaretSquareDown } from \"@styled-icons/fa-regular/CaretSquareDown\";\nimport { CaretSquareUp } from \"@styled-icons/fa-regular/CaretSquareUp\";\n\nimport withColor from \"components/withcolors\";\nimport { rhythm } from \"utils/typography\";\n\nconst ShowToC = withColor(\n  (c) => ({ black: c.primary.black }),\n  styled.button`\n    background: none;\n    border: none;\n    outline: none;\n    width: 100%;\n    text-align: center;\n    color: ${(props) => props.theme.colors.black};\n  `\n);\n\nconst ToCHTML = styled.div`\n  ul {\n    list-style: none;\n  }\n  > ul {\n    margin: 0;\n    > li {\n      & > p,\n      & > a {\n        font-weight: bold;\n      }\n    }\n  }\n`;\n\nconst ToCContainer = withColor(\n  (c) => ({ white: c.secondary.white }),\n  styled.div`\n    background: ${(props) => props.theme.colors.white};\n    margin: ${rhythm(1)} 0;\n    padding: ${rhythm(1)};\n  `\n);\n\nexport default class TableOfContents extends Component {\n  static propTypes = {\n    tableOfContents: PropTypes.string.isRequired,\n    show: PropTypes.bool,\n  };\n  state = { show: this.props.show || false };\n  toggle = () => {\n    const show = !this.state.show;\n    this.setState({ show });\n  };\n  render() {\n    const { show } = this.state;\n    const caret = show ? (\n      <CaretSquareUp size=\"1em\" />\n    ) : (\n      <CaretSquareDown size=\"1em\" />\n    );\n    const msg = \"Table of Contents\";\n    return (\n      <ToCContainer>\n        <ShowToC onClick={this.toggle}>\n          {caret} {msg}\n        </ShowToC>\n        {show && (\n          <ToCHTML\n            dangerouslySetInnerHTML={{ __html: this.props.tableOfContents }}\n          />\n        )}\n      </ToCContainer>\n    );\n  }\n}\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport Layout from \"components/layout\";\nimport TableOfContents from \"components/toc\";\nimport SEO from \"components/seo\";\nimport TextBody from \"components/textbody\";\n\nconst localizedStrings = {\n  en: {\n    originally_written: \"Originally written\",\n    last_updated_on: \"Last updated on\",\n  },\n\n  es: {\n    originally_written: \"Escrito originalmente\",\n    last_updated_on: \"Ultima modificaciÃ³n en\",\n  },\n};\n\nconst Header = styled.header``;\n\nconst Meta = styled.footer`\n  margin: 1em 0;\n  font-style: italic;\n`;\n\nconst PostMeta = ({ language, createdAt, createdAtString, lastModifiedAt }) => (\n  <Meta>\n    {language && (\n      <>\n        <span>{localizedStrings[language].originally_written}</span>\n        <span> </span>\n        <time dateTime={createdAt}>{createdAtString}</time>\n        <span>{\". \"}</span>\n        <span>{localizedStrings[language].last_updated_on}</span>\n        <span> </span>\n        <time dateTime={lastModifiedAt}>{lastModifiedAt}</time>\n        <span>{\".\"}</span>\n      </>\n    )}\n  </Meta>\n);\nPostMeta.propTypes = {\n  language: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  createdAtString: PropTypes.string.isRequired,\n  lastModifiedAt: PropTypes.string.isRequired,\n};\n\nconst PostHeader = ({ title }) => (\n  <Header>\n    <h1>{title}</h1>\n  </Header>\n);\nPostHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nconst PostTemplate = ({\n  data: {\n    post: {\n      fields: { author, lastModifiedAt, language, ...fields },\n      frontmatter: {\n        TOC,\n        title,\n        description,\n        shareTitle,\n        shareDescription,\n        createdAt,\n        createdAtString_es,\n        createdAtString_en,\n      },\n      tableOfContents,\n      html: __html,\n    },\n  },\n}) => {\n  const createdAtString = { en: createdAtString_en, es: createdAtString_es };\n  return (\n    <Layout>\n      <SEO\n        language={language}\n        title={title}\n        description={description}\n        og={{\n          title: shareTitle,\n          description: shareDescription,\n          author,\n          type: \"article\",\n          published_time: createdAt,\n          modified_time: lastModifiedAt,\n        }}\n      />\n      <main>\n        <article>\n          <TextBody>\n            <PostHeader title={title} />\n            <PostMeta\n              {...{\n                language,\n                createdAt,\n                createdAtString: createdAtString[language],\n                lastModifiedAt,\n              }}\n              {...fields}\n            />\n            {TOC && <TableOfContents {...{ tableOfContents }} />}\n            <div dangerouslySetInnerHTML={{ __html }} />\n          </TextBody>\n        </article>\n      </main>\n    </Layout>\n  );\n};\nPostTemplate.propTypes = {\n  data: PropTypes.shape({\n    post: PropTypes.shape({\n      html: PropTypes.string.isRequired,\n      fields: PropTypes.shape({\n        language: PropTypes.string.isRequired,\n        author: PropTypes.string,\n        lastModifiedAt: PropTypes.string,\n      }),\n      frontmatter: PropTypes.shape({\n        TOC: PropTypes.bool,\n        title: PropTypes.string,\n        description: PropTypes.string,\n        shareTitle: PropTypes.string,\n        shareDescription: PropTypes.string,\n        createdAt: PropTypes.string,\n        createdAtString_en: PropTypes.string,\n        createdAtString_es: PropTypes.string,\n      }),\n      tableOfContents: PropTypes.string,\n    }),\n  }),\n};\n\nexport default PostTemplate;\n\nexport const query = graphql`\n  query PostTemplateQuery($path: String!) {\n    post: markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      tableOfContents(pathToSlugField: \"frontmatter.path\")\n      fields {\n        lastModifiedAt(formatString: \"YYYY-MM-DD\")\n        author\n        language\n      }\n      frontmatter {\n        createdAtString_en: date(fromNow: true, locale: \"en\")\n        createdAtString_es: date(fromNow: true, locale: \"es\")\n        createdAt: date(formatString: \"YYYY-MM-DD\")\n        path\n        title\n        description\n        shareTitle\n        shareDescription\n        TOC\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}