{"version":3,"sources":["webpack:///./src/components/bloglist.js","webpack:///./src/components/blogitem.js","webpack:///./src/pages/blog.js"],"names":["BlogList","styled","ol","localizedStrings","es","from","last_updated_on","en","ListItem","li","rhythm","ArtLink","withColors","c","focus","accent","pure","Link","props","theme","colors","Meta","div","WhiteBreak","span","media","tablet","LastModifiedAt","lastModifiedAt","language","dateTime","BlogItem","createdAt","createdAtString","path","title","description","pageLanguage","showLastMod","showDescription","to","lang","BlogPage","data","defaultLanguage","site","siteMetadata","posts","postList","blogPage","frontmatter","shareTitle","shareDescription","__html","html","og","type","dangerouslySetInnerHTML","map","post","fields","key","query"],"mappings":"2FAAA,IAEMA,EAFN,UAEiBC,EAAOC,GAAV,yEAAGD,CAAH,+BAKCD,O,8OCEf,IAAMG,EAAmB,CACvBC,GAAI,CACFC,KAAM,UACNC,gBAAiB,2BAEnBC,GAAI,CACFF,KAAM,UACNC,gBAAiB,oBAIfE,EAAWP,IAAOQ,GAAV,qEAAGR,CAAH,+BACFS,YAAO,IAMbC,EAAUC,aACd,SAACC,GAAD,MAAQ,CAAEC,MAAOD,EAAEE,OAAOC,QAC1Bf,YAAOgB,QAFiB,oEAExBhB,CAFwB,+CAMX,SAACiB,GAAD,OAAWA,EAAMC,MAAMC,OAAON,UAKvCO,EAAOpB,IAAOqB,IAAV,iEAAGrB,CAAH,kBAIJsB,EAAatB,IAAOuB,KAAV,uEAAGvB,CAAH,8CAKZwB,IAAMC,OALM,MAUVC,EAAiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,SAAnB,OACrB,oCACE,kBAACN,EAAD,MACA,8BAAOpB,EAAiB0B,GAAUvB,iBAClC,mCACA,0BAAMwB,SAAUF,GAAiBA,GACjC,qCAqDWG,IA7CE,SAAC,GAAD,IACfH,EADe,EACfA,eACAI,EAFe,EAEfA,UACAC,EAHe,EAGfA,gBACAC,EAJe,EAIfA,KACAC,EALe,EAKfA,MACAC,EANe,EAMfA,YACAP,EAPe,EAOfA,SACAQ,EARe,EAQfA,aARe,IASfC,mBATe,aAUfC,uBAVe,gBAYf,kBAAC/B,EAAD,KACE,iCACE,kBAACG,EAAD,CAAS6B,GAAIN,GACX,gCACE,wBAAIO,KAAMZ,GAAWM,GACrB,kBAACd,EAAD,KACE,8BAAOlB,EAAiBkC,GAAchC,MACtC,mCACA,0BAAMyB,SAAUE,GAAYC,GAC5B,mCACCK,GACC,kBAACX,EAAmB,CAAEC,iBAAgBC,SAAUQ,MAIrDE,GAAmB,6BAAMH,Q,gLCHnBM,UAhFE,SAAC,GAAD,QACfC,KAEoBC,EAHL,EAEbC,KACEC,aAAgBF,gBAENG,EALC,EAKbC,SAAYD,MALC,IAMbE,SANa,IAOXC,YAPW,IAQTf,aARS,MAQD,OARC,EASTgB,EATS,EASTA,WACAf,EAVS,EAUTA,YACAgB,EAXS,EAWTA,iBAEIC,EAbK,EAaXC,KAbW,OAiBf,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEnB,MAAOA,EACPC,YAAaA,EACbmB,GAAI,CACFpB,MAAOgB,GAAchB,EACrBqB,KAAM,OACNpB,YAAagB,GAAoBhB,KAGrC,8BACE,kBAAC,IAAD,KACE,gCACE,4BAAKD,GACL,yBAAKsB,wBAAyB,CAAEJ,aAElC,kBAAC,IAAD,KACGN,EAAMW,KACL,oBACEC,KADF,IAEIT,YAAehB,EAFnB,EAEmBA,KAASgB,EAF5B,wBAGIU,EAHJ,EAGIA,OAHJ,OAME,kBAAC,IAAD,eACEC,IAAK3B,EACLA,KAAMA,EACNG,aAAcO,GACVM,EACAU,YAoCb,IAAME,EAAK","file":"component---src-pages-blog-js-7b21fa1043f94ddea6dd.js","sourcesContent":["import styled from \"styled-components\";\n\nconst BlogList = styled.ol`\n  margin: 0;\n  list-style: none;\n`;\n\nexport default BlogList;\n","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport media from \"utils/media\";\nimport withColors from \"components/withcolors\";\nimport { rhythm } from \"utils/typography\";\n\nconst localizedStrings = {\n  es: {\n    from: \"Escrito\",\n    last_updated_on: \"Última actualización en\",\n  },\n  en: {\n    from: \"Written\",\n    last_updated_on: \"Last updated on\",\n  },\n};\n\nconst ListItem = styled.li`\n  margin: ${rhythm(1)} 0;\n  h2 {\n    margin: 0;\n  }\n`;\n\nconst ArtLink = withColors(\n  (c) => ({ focus: c.accent.pure }),\n  styled(Link)`\n    color: inherit;\n    &:hover,\n    &:focus {\n      color: ${(props) => props.theme.colors.focus};\n    }\n  `\n);\n\nconst Meta = styled.div`\n  opacity: 0.7;\n`;\n\nconst WhiteBreak = styled.span`\n  &::before {\n    content: \" \";\n    display: block;\n  }\n  ${media.tablet`\n    &::before {display: inline;}\n  `};\n`;\n\nconst LastModifiedAt = ({ lastModifiedAt, language }) => (\n  <>\n    <WhiteBreak />\n    <span>{localizedStrings[language].last_updated_on}</span>\n    <span> </span>\n    <time dateTime={lastModifiedAt}>{lastModifiedAt}</time>\n    <span>.</span>\n  </>\n);\nLastModifiedAt.propTypes = {\n  lastModifiedAt: PropTypes.string.isRequired,\n  language: PropTypes.string.isRequired,\n};\n\nconst BlogItem = ({\n  lastModifiedAt,\n  createdAt,\n  createdAtString,\n  path,\n  title,\n  description,\n  language,\n  pageLanguage,\n  showLastMod = true,\n  showDescription = true,\n}) => (\n  <ListItem>\n    <article>\n      <ArtLink to={path}>\n        <header>\n          <h2 lang={language}>{title}</h2>\n          <Meta>\n            <span>{localizedStrings[pageLanguage].from}</span>\n            <span> </span>\n            <time dateTime={createdAt}>{createdAtString}</time>\n            <span>.</span>\n            {showLastMod && (\n              <LastModifiedAt {...{ lastModifiedAt, language: pageLanguage }} />\n            )}\n          </Meta>\n        </header>\n        {showDescription && <div>{description}</div>}\n      </ArtLink>\n    </article>\n  </ListItem>\n);\nBlogItem.propTypes = {\n  lastModifiedAt: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired,\n  createdAtString: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  language: PropTypes.string.isRequired,\n  pageLanguage: PropTypes.string.isRequired,\n  showLastMod: PropTypes.bool,\n  showDescription: PropTypes.bool,\n};\n\nexport default BlogItem;\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Layout from \"components/layout\";\nimport BlogItem from \"components/blogitem\";\nimport BlogList from \"components/bloglist\";\nimport SEO from \"components/seo\";\nimport TextBody from \"components/textbody\";\n\nconst BlogPage = ({\n  data: {\n    site: {\n      siteMetadata: { defaultLanguage },\n    },\n    postList: { posts },\n    blogPage: {\n      frontmatter: {\n        title = \"Blog\",\n        shareTitle,\n        description,\n        shareDescription,\n      },\n      html: __html,\n    },\n  },\n}) => (\n  <Layout>\n    <SEO\n      title={title}\n      description={description}\n      og={{\n        title: shareTitle || title,\n        type: \"blog\",\n        description: shareDescription || description,\n      }}\n    />\n    <main>\n      <TextBody>\n        <header>\n          <h1>{title}</h1>\n          <div dangerouslySetInnerHTML={{ __html }} />\n        </header>\n        <BlogList>\n          {posts.map(\n            ({\n              post: {\n                frontmatter: { path, ...frontmatter },\n                fields,\n              },\n            }) => (\n              <BlogItem\n                key={path}\n                path={path}\n                pageLanguage={defaultLanguage}\n                {...frontmatter}\n                {...fields}\n              />\n            )\n          )}\n        </BlogList>\n      </TextBody>\n    </main>\n  </Layout>\n);\nBlogPage.propTypes = {\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        defaultLanguage: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n    postList: PropTypes.shape({\n      posts: PropTypes.array,\n    }),\n    blogPage: PropTypes.shape({\n      html: PropTypes.string,\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        shareTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n        description: PropTypes.string,\n        shareDescription: PropTypes.oneOfType([\n          PropTypes.string,\n          PropTypes.bool,\n        ]),\n      }),\n    }),\n  }),\n};\n\nexport default BlogPage;\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        defaultLanguage\n      }\n    }\n\n    blogPage: markdownRemark(frontmatter: { path: { eq: \"/blog\" } }) {\n      frontmatter {\n        title\n        shareTitle\n        description\n        shareDescription\n      }\n      html\n    }\n\n    postList: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: {\n        frontmatter: { path: { regex: \"/.+/\" }, date: { ne: null } }\n        fields: { type: { eq: \"blogPost\" } }\n      }\n    ) {\n      posts: edges {\n        post: node {\n          fields {\n            lastModifiedAt(formatString: \"YYYY-MM-DD\")\n            language\n          }\n          frontmatter {\n            createdAtString: date(fromNow: true)\n            createdAt: date(formatString: \"YYYY-MM-DD\")\n            title\n            path\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}