{"version":3,"sources":["webpack:///./src/components/bloglist.js","webpack:///./src/components/projectcard.js","webpack:///./src/pages/showcase.js"],"names":["BlogList","styled","ol","ListItem","li","rhythm","ExtLink","withColors","c","focus","accent","pure","a","props","colors","Meta","div","Tag","small","Status","name","description","title","Short","Long","ProjectCard","dateStarted","dateStartedString","dateLast","dateLastString","href","status","lastString","long","short","dateTime","query","ShowcasePage","data","activeProjectsList","onholdProjectsList","showcasePage","frontmatter","shareDescription","shareTitle","__html","html","og","dangerouslySetInnerHTML","projects","map","node","project","key"],"mappings":"4FAAA,IAEMA,EAFN,UAEiBC,QAAOC,GAAV,yEAAGD,CAAH,+BAKCD,O,gLCATG,EAAWF,UAAOG,GAAV,4EAAGH,CAAH,+BACFI,YAAO,IAMbC,EAAUC,aACd,SAACC,GAAD,MAAQ,CAAEC,MAAOD,EAAEE,OAAOC,QAC1BV,UAAOW,EAFiB,2EAExBX,CAFwB,+CAMX,SAACY,GAAD,OAAWA,EAAMC,OAAOL,UAKjCM,EAAOd,UAAOe,IAAV,wEAAGf,CAAH,kBAIJgB,EAAMhB,UAAOiB,MAAV,uEAAGjB,CAAH,+PAkBHkB,EAAS,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACtB,OAAO,kBAACJ,EAAD,CAAKK,MAAOD,GAAcD,IAO7BG,EAAQtB,UAAOe,IAAV,yEAAGf,CAAH,wBAILuB,EAAOvB,UAAOe,IAAV,wEAAGf,CAAH,MA2DKwB,EAzDK,SAAC,GAAD,IAClBC,EADkB,EAClBA,YACAC,EAFkB,EAElBA,kBACAC,EAHkB,EAGlBA,SACAC,EAJkB,EAIlBA,eACAC,EALkB,EAKlBA,KACAR,EANkB,EAMlBA,MANkB,IAOlBS,OAAUC,EAPQ,EAORA,WAAeD,EAPP,kCAQlBV,YAAeY,EARG,EAQHA,KAAMC,EARH,EAQGA,MARH,OAUlB,kBAAC/B,EAAD,KACE,kBAACG,EAAD,CAASwB,KAAMA,GACb,iCACE,gCACE,4BACGR,EACD,kBAAC,EAAWS,IAEd,kBAAChB,EAAD,KACE,0CACA,0BAAMoB,SAAUT,GAAcC,GAC9B,mCACCE,GACC,8BACE,mCACA,8BAAOG,GACP,sCACA,0BAAMG,SAAUP,GAAWA,GAC3B,sCAKR,kBAACL,EAAD,KAAQW,GACR,kBAACV,EAAD,KAAOS,O,oCCHFG,GAFEC,UAhFM,SAAC,GAAD,QACnBC,KACEC,EAFiB,EAEjBA,mBACAC,EAHiB,EAGjBA,mBAHiB,IAIjBC,aAJiB,IAKfC,YALe,IAMbpB,aANa,MAML,WANK,EAObD,EAPa,EAObA,YACAsB,EARa,EAQbA,iBACAC,EATa,EASbA,WAEIC,EAXS,EAWfC,KAXe,OAenB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACExB,MAAOA,EACPD,YAAaA,EACb0B,GAAI,CACFzB,MAAOsB,EACPvB,YAAasB,GAAoBtB,KAGrC,8BACE,kBAAC,IAAD,KACE,gCACE,4BAAKC,GACL,yBAAK0B,wBAAyB,CAAEH,aAElC,kBAAC,IAAD,KACG,sBAAIN,EAAmBU,UAAvB,YAAoCT,EAAmBS,WAAUC,KAChE,oBACEC,KACEC,QAAW9B,EAFf,EAEeA,MAAU8B,EAFzB,gCAKE,kBAAC,EAAD,eAAaC,IAAK/B,EAAOA,MAAOA,GAAW8B,YA6CvC","file":"component---src-pages-showcase-js-5b2a1938998c6ccc5452.js","sourcesContent":["import styled from \"styled-components\";\n\nconst BlogList = styled.ol`\n  margin: 0;\n  list-style: none;\n`;\n\nexport default BlogList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport withColors from \"components/withcolors\";\nimport { rhythm } from \"utils/typography\";\n\nconst ListItem = styled.li`\n  margin: ${rhythm(1)} 0;\n  h2 {\n    margin: 0;\n  }\n`;\n\nconst ExtLink = withColors(\n  (c) => ({ focus: c.accent.pure }),\n  styled.a`\n    color: inherit;\n    &:hover,\n    &:focus {\n      color: ${(props) => props.colors.focus};\n    }\n  `\n);\n\nconst Meta = styled.div`\n  opacity: 0.7;\n`;\n\nconst Tag = styled.small`\n  display: inline-block;\n  vertical-align: bottom;\n  float: right;\n  padding: 0.3em 0.6em;\n  margin: 0.5em 0.5em 0.5em 1em;\n  transition: background 0.05s, color 0.05s;\n  background: transparent;\n  font-family: monospace;\n  cursor: default;\n  &::before {\n    content: \"[\";\n  }\n  &::after {\n    content: \"]\";\n  }\n`;\n\nconst Status = ({ name, description }) => {\n  return <Tag title={description}>{name}</Tag>;\n};\nStatus.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n};\n\nconst Short = styled.div`\n  font-style: italic;\n`;\n\nconst Long = styled.div``;\n\nconst ProjectCard = ({\n  dateStarted,\n  dateStartedString,\n  dateLast,\n  dateLastString,\n  href,\n  title,\n  status: { lastString, ...status },\n  description: { long, short },\n}) => (\n  <ListItem>\n    <ExtLink href={href}>\n      <article>\n        <header>\n          <h2>\n            {title}\n            <Status {...status} />\n          </h2>\n          <Meta>\n            <span>Started </span>\n            <time dateTime={dateStarted}>{dateStartedString}</time>\n            <span>.</span>\n            {dateLastString && (\n              <span>\n                <span> </span>\n                <span>{lastString}</span>\n                <span> on </span>\n                <time dateTime={dateLast}>{dateLast}</time>\n                <span>.</span>\n              </span>\n            )}\n          </Meta>\n        </header>\n        <Short>{short}</Short>\n        <Long>{long}</Long>\n      </article>\n    </ExtLink>\n  </ListItem>\n);\nProjectCard.propTypes = {\n  dateStarted: PropTypes.string.isRequired,\n  dateStartedString: PropTypes.string.isRequired,\n  dateLast: PropTypes.string,\n  dateLastString: PropTypes.string,\n  href: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  status: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n    lastString: PropTypes.string,\n  }),\n  description: PropTypes.shape({\n    short: PropTypes.string.isRequired,\n    long: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ProjectCard;\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Layout from \"components/layout\";\nimport ProjectCard from \"components/projectcard\";\nimport List from \"components/bloglist\";\nimport SEO from \"components/seo\";\nimport TextBody from \"components/textbody\";\n\nconst ShowcasePage = ({\n  data: {\n    activeProjectsList,\n    onholdProjectsList,\n    showcasePage: {\n      frontmatter: {\n        title = \"Showcase\",\n        description,\n        shareDescription,\n        shareTitle,\n      },\n      html: __html,\n    },\n  },\n}) => (\n  <Layout>\n    <SEO\n      title={title}\n      description={description}\n      og={{\n        title: shareTitle,\n        description: shareDescription || description,\n      }}\n    />\n    <main>\n      <TextBody>\n        <header>\n          <h1>{title}</h1>\n          <div dangerouslySetInnerHTML={{ __html }} />\n        </header>\n        <List>\n          {[...activeProjectsList.projects, ...onholdProjectsList.projects].map(\n            ({\n              node: {\n                project: { title, ...project },\n              },\n            }) => (\n              <ProjectCard key={title} title={title} {...project} />\n            )\n          )}\n        </List>\n      </TextBody>\n    </main>\n  </Layout>\n);\nShowcasePage.propTypes = {\n  data: PropTypes.shape({\n    activeProjectsList: PropTypes.shape({\n      projects: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            project: PropTypes.shape({ title: PropTypes.string.isRequired }),\n          }),\n        })\n      ),\n    }),\n    onholdProjectsList: PropTypes.shape({\n      projects: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            project: PropTypes.shape({ title: PropTypes.string.isRequired }),\n          }),\n        })\n      ),\n    }),\n    showcasePage: PropTypes.shape({\n      html: PropTypes.string,\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        shareTitle: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n        description: PropTypes.string,\n        shareDescription: PropTypes.oneOfType([\n          PropTypes.string,\n          PropTypes.bool,\n        ]),\n      }),\n    }),\n  }),\n};\n\nexport default ShowcasePage;\n\nexport const query = graphql`\n  {\n    showcasePage: markdownRemark(frontmatter: { path: { eq: \"/showcase\" } }) {\n      frontmatter {\n        title\n        description\n        shareTitle\n        shareDescription\n      }\n      html\n    }\n\n    activeProjectsList: allProjectsYaml(\n      filter: { project: { dateLast: { eq: null } } }\n      sort: { fields: project___dateStarted, order: DESC }\n    ) {\n      projects: edges {\n        node {\n          project {\n            title\n            href\n            dateStarted(formatString: \"YYYY-MM-DD\")\n            dateStartedString: dateStarted(fromNow: true)\n            dateLast(formatString: \"YYYY-MM-DD\")\n            dateLastString: dateLast(fromNow: true)\n            status {\n              name\n              description\n              lastString\n            }\n            description {\n              long\n              short\n            }\n          }\n        }\n      }\n    }\n\n    onholdProjectsList: allProjectsYaml(\n      filter: { project: { dateLast: { ne: null } } }\n      sort: { fields: project___dateLast, order: DESC }\n    ) {\n      projects: edges {\n        node {\n          project {\n            title\n            href\n            dateStarted(formatString: \"YYYY-MM-DD\")\n            dateStartedString: dateStarted(fromNow: true)\n            dateLast(formatString: \"YYYY-MM-DD\")\n            dateLastString: dateLast(fromNow: true)\n            status {\n              name\n              description\n              lastString\n            }\n            description {\n              long\n              short\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}